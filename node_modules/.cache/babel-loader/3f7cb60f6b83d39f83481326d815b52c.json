{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from \"react\";\nimport DraggableChildComponent from \"../draggableChildren/draggableChildren\";\n\nclass DraggableComponent extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      divs: [],\n      currentDiv: null,\n      toDiv: null\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.setState({\n        divs: this.props.children\n      });\n    });\n\n    _defineProperty(this, \"insertElementBefore\", () => {\n      let divs = [...this.state.divs];\n      let currentDiv = this.state.currentDiv;\n      let toDiv = this.state.toDiv;\n\n      if (currentDiv !== toDiv) {\n        let currentEle = { ...divs[currentDiv]\n        };\n        divs = divs.filter((val, idx) => {\n          return idx !== currentDiv;\n        });\n        divs.splice(toDiv, 0, currentEle); // This is a hack - Initialize the state as blank and then reset the state\n        // With only 1 setState, the entire component doesnot get rerendered.\n\n        this.setState({\n          divs: [],\n          currentDiv: null,\n          toDiv: null\n        }, () => {\n          this.setState({\n            divs\n          });\n        });\n      }\n    });\n\n    _defineProperty(this, \"dragStart\", idx => {\n      this.setState({\n        currentDiv: idx\n      });\n    });\n\n    _defineProperty(this, \"dragEnter\", idx => {\n      this.setState({\n        toDiv: idx\n      });\n    });\n\n    _defineProperty(this, \"dragDrop\", () => {\n      this.insertElementBefore();\n    });\n  }\n\n  render() {\n    let ele = [];\n\n    for (let i = 0; i < this.state.divs.length; i++) {\n      ele.push(React.createElement(DraggableChildComponent, {\n        dragStart: () => this.dragStart(i),\n        dragEnter: () => this.dragEnter(i),\n        dragEnd: this.dragDrop,\n        key: i\n      }, this.state.divs[i]));\n    }\n\n    return React.createElement(React.Fragment, null, ele);\n  }\n\n}\n\nexport default DraggableComponent;","map":{"version":3,"sources":["/Users/razbasnet/Documents/react/GitHub/simple-to-do/node_modules/react-drag-reorder/dist/components/draggable/draggable.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","React","Component","DraggableChildComponent","DraggableComponent","constructor","args","divs","currentDiv","toDiv","setState","props","children","state","currentEle","filter","val","idx","splice","insertElementBefore","render","ele","i","length","push","createElement","dragStart","dragEnter","dragEnd","dragDrop","Fragment"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport DraggableChildComponent from \"../draggableChildren/draggableChildren\";\n\nclass DraggableComponent extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      divs: [],\n      currentDiv: null,\n      toDiv: null\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.setState({\n        divs: this.props.children\n      });\n    });\n\n    _defineProperty(this, \"insertElementBefore\", () => {\n      let divs = [...this.state.divs];\n      let currentDiv = this.state.currentDiv;\n      let toDiv = this.state.toDiv;\n\n      if (currentDiv !== toDiv) {\n        let currentEle = { ...divs[currentDiv]\n        };\n        divs = divs.filter((val, idx) => {\n          return idx !== currentDiv;\n        });\n        divs.splice(toDiv, 0, currentEle); // This is a hack - Initialize the state as blank and then reset the state\n        // With only 1 setState, the entire component doesnot get rerendered.\n\n        this.setState({\n          divs: [],\n          currentDiv: null,\n          toDiv: null\n        }, () => {\n          this.setState({\n            divs\n          });\n        });\n      }\n    });\n\n    _defineProperty(this, \"dragStart\", idx => {\n      this.setState({\n        currentDiv: idx\n      });\n    });\n\n    _defineProperty(this, \"dragEnter\", idx => {\n      this.setState({\n        toDiv: idx\n      });\n    });\n\n    _defineProperty(this, \"dragDrop\", () => {\n      this.insertElementBefore();\n    });\n  }\n\n  render() {\n    let ele = [];\n\n    for (let i = 0; i < this.state.divs.length; i++) {\n      ele.push(React.createElement(DraggableChildComponent, {\n        dragStart: () => this.dragStart(i),\n        dragEnter: () => this.dragEnter(i),\n        dragEnd: this.dragDrop,\n        key: i\n      }, this.state.divs[i]));\n    }\n\n    return React.createElement(React.Fragment, null, ele);\n  }\n\n}\n\nexport default DraggableComponent;"]},"metadata":{},"sourceType":"module"}